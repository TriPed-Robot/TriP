import unittest

import numpy as np
from trip_kinematics.Utility import Rotation as R


from scipy.spatial.transform import Rotation as RR


class TestStates(unittest.TestCase):
    """Correct results were generated using scipy.spatial.transform.Rotation.
    """

    def test_from_euler_to_quat(self):
        from_euler_cases = [
            ([1, 2, 3], [0.4359528440735657, -0.7182870182434115, 0.3106224510657039, 0.44443511344300074]),
            ([1, 0, 0], [0.8775825618903728, 0.479425538604203, 0.0, 0.0]),
            ([0, 1, 0], [0.8775825618903728, 0.0, 0.479425538604203, 0.0]),
            ([0, 0, 1], [0.8775825618903728, 0.0, 0.0, 0.479425538604203]),
            ([1.9259795237086745, -1.3166224746837234, -1.6487569080546618],
             [0.6754185988029391, 0.1844402562591348, -0.7139352011035228, 0.00938279741930681]),
            ([1.7518638481261277, -1.4762648402511551, 2.783050177056892],
             [-0.4241491835815902, 0.5252649613496548, 0.482281714511987, 0.5582101201991901]),
            ([-1.5637740430088356, 0.9967772877753394, -1.281072618629502],
             [0.7010098084209453, -0.2935149227036473, 0.6418274036266723, -0.1024295982699634]),
            ([-2.018987322821037, -2.477643741973166, -1.7329756283622468],
             [-0.4975785988500945, -0.562138163026927, -0.1155880687282515, -0.6504272611159234]),
            ([-1.547364165870453, 3.1155873968096914, 2.5081666410682404],
             [-0.6610669854921286, -0.6825367059399726, 0.2141370877143812, 0.22644953831298628]),
            ([0.9232800471655072, 2.9636239629991614, 1.3121379453450235],
             [0.3336790888032567, -0.5126269396587794, 0.7307896657891122, -0.3030154299822701]),
            ([-3.0969110304794603, 1.6540648344396605, -1.1444726410810802],
             [0.4111294068459875, -0.5601567984771901, 0.38036785991321215, 0.6103419230982696]),
        ]

        for euler_angles, quat in from_euler_cases:
            assert np.allclose(R.from_euler('xyz', euler_angles, degrees=False).as_quat(), quat)
            euler_angles_deg = np.array(euler_angles) * (180 / np.pi)
            assert np.allclose(R.from_euler('xyz', euler_angles_deg, degrees=True).as_quat(), quat)

    def test_from_matrix_to_quat(self):
        test_cases = [
            (np.array([[0.41198224566568303, -0.8337376517741568, -0.3676304629248995],
                       [-0.058726644927620864, -0.4269176212762076, 0.902381585483331],
                       [-0.9092974268256819, -0.35017548837401474, -0.2248450953661529]]),
             [-0.43595284407356566, 0.7182870182434113, -0.31062245106570385, -0.4444351134430007]),
            (np.array([[1., 0., 0.],
                       [0., 0.54030231, -0.84147098],
                       [0., 0.84147098, 0.54030231]]),
             [0.8775825618903726, 0.47942553860420295, 0.0, 0.0]),
            (np.array([[0.54030231, 0., 0.84147098],
                       [0., 1., 0.],
                       [-0.84147098, 0., 0.54030231]]),
             [0.8775825618903726, 0.0, 0.47942553860420295, 0.0]),
            (np.array([[0.54030231, -0.84147098, 0.],
                       [0.84147098, 0.54030231, 0.],
                       [0., 0., 1.]]),
             [0.8775825618903726, 0.0, 0.0, 0.47942553860420295]),
            (np.array([[-0.01958302, -0.27603141, -0.9609491],
                       [-0.25068215, 0.93178751, -0.26254618],
                       [0.96787136, 0.23575134, -0.08744336]]),
             [-0.6754185988029392, -0.18444025625913482, 0.7139352011035228, -0.00938279741930680]),
            (np.array([[-0.08838838, 0.98018011, 0.17729764],
                       [0.03312264, -0.17500364, 0.98401048],
                       [0.99553523, 0.09284766, -0.01699786]]),
             [-0.4241491835815902, 0.5252649613496548, 0.4822817145119869, 0.5582101201991901]),
            (np.array([[0.15513152, -0.23316354, 0.95998384],
                       [-0.52038015, 0.80671434, 0.28002943],
                       [-0.83972538, -0.54299793, 0.00381315]]),
             [0.7010098084209453, -0.2935149227036473, 0.6418274036266723, -0.10242959826996342]),
            (np.array([[0.12716755, -0.51732444, 0.84628827],
                       [0.7772303, -0.47810987, -0.40905258],
                       [0.61623167, 0.7097791, 0.34128017]]),
             [0.49757859885009453, 0.5621381630269271, 0.11558806872825153, 0.6504272611159234]),
            (np.array([[0.80573183, 0.00708378, -0.59223816],
                       [-0.59170947, -0.0342715, -0.80542248],
                       [-0.02600233, 0.99938745, -0.02342209]]),
             [0.6610669854921286, 0.6825367059399726, -0.2141370877143812, -0.22644953831298634]),
            (np.array([[-0.25174377, -0.54702511, 0.7983662],
                       [-0.95146476, 0.29079054, -0.10077531],
                       [-0.17703071, -0.78498687, -0.59367983]]),
             [0.3336790888032567, -0.5126269396587794, 0.7307896657891123, -0.30301542998227005]),
            (np.array([[-0.03439394, -0.92799031, -0.37101353],
                       [0.07572774, -0.3725858, 0.92490277],
                       [-0.99653518, 0.00371504, 0.0830893]]),
             [0.4111294068459875, -0.5601567984771901, 0.38036785991321215, 0.6103419230982696])
        ]

        for matrix, quat in test_cases:
            assert np.allclose(R.from_matrix(matrix).as_quat(), quat)


def main():
    test_cases = [
        (np.array([[0.41198224566568303, -0.8337376517741568, -0.3676304629248995],
                   [-0.058726644927620864, -0.4269176212762076, 0.902381585483331],
                   [-0.9092974268256819, -0.35017548837401474, -0.2248450953661529]]),
         [-0.43595284407356566, 0.7182870182434113, -0.31062245106570385, -0.4444351134430007]),
        (np.array([[1., 0., 0.],
                   [0., 0.54030231, -0.84147098],
                   [0., 0.84147098, 0.54030231]]),
         [0.8775825618903726, 0.47942553860420295, 0.0, 0.0]),
        (np.array([[0.54030231, 0., 0.84147098],
                   [0., 1., 0.],
                   [-0.84147098, 0., 0.54030231]]),
         [0.8775825618903726, 0.0, 0.47942553860420295, 0.0]),
        (np.array([[0.54030231, -0.84147098, 0.],
                   [0.84147098, 0.54030231, 0.],
                   [0., 0., 1.]]),
         [0.8775825618903726, 0.0, 0.0, 0.47942553860420295]),
        (np.array([[-0.01958302, -0.27603141, -0.9609491],
                   [-0.25068215, 0.93178751, -0.26254618],
                   [0.96787136, 0.23575134, -0.08744336]]),
         [-0.6754185988029392, -0.18444025625913482, 0.7139352011035228, -0.009382797419306801]),
        (np.array([[-0.08838838, 0.98018011, 0.17729764],
                   [0.03312264, -0.17500364, 0.98401048],
                   [0.99553523, 0.09284766, -0.01699786]]),
         [-0.4241491835815902, 0.5252649613496548, 0.4822817145119869, 0.5582101201991901]),
        (np.array([[0.15513152, -0.23316354, 0.95998384],
                   [-0.52038015, 0.80671434, 0.28002943],
                   [-0.83972538, -0.54299793, 0.00381315]]),
         [0.7010098084209453, -0.2935149227036473, 0.6418274036266723, -0.10242959826996342]),
        (np.array([[0.12716755, -0.51732444, 0.84628827],
                   [0.7772303, -0.47810987, -0.40905258],
                   [0.61623167, 0.7097791, 0.34128017]]),
         [0.49757859885009453, 0.5621381630269271, 0.11558806872825153, 0.6504272611159234]),
        (np.array([[0.80573183, 0.00708378, -0.59223816],
                   [-0.59170947, -0.0342715, -0.80542248],
                   [-0.02600233, 0.99938745, -0.02342209]]),
         [0.6610669854921286, 0.6825367059399726, -0.2141370877143812, -0.22644953831298634]),
        (np.array([[-0.25174377, -0.54702511, 0.7983662],
                   [-0.95146476, 0.29079054, -0.10077531],
                   [-0.17703071, -0.78498687, -0.59367983]]),
         [0.3336790888032567, -0.5126269396587794, 0.7307896657891123, -0.30301542998227005]),
        (np.array([[-0.03439394, -0.92799031, -0.37101353],
                   [0.07572774, -0.3725858, 0.92490277],
                   [-0.99653518, 0.00371504, 0.0830893]]),
         [0.4111294068459875, -0.5601567984771901, 0.38036785991321215, 0.6103419230982696])
    ]

    for matrix, quat in test_cases:
        assert np.allclose(R.from_matrix(matrix).as_quat(), quat)


if __name__ == '__main__':
    main()
